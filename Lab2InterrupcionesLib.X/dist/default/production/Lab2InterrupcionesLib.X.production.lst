

Microchip MPLAB XC8 Assembler V2.31 build 20201012212115 
                                                                                               Mon Feb 01 12:26:10 2021

Microchip MPLAB XC8 C Compiler v2.31 (Free license) build 20201012212115 Og1 
     1                           	processor	16F887
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	idataBANK0,global,class=CODE,delta=2,noexec
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1,noexec
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,noexec
     8                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,noexec
     9                           	psect	inittext,global,class=CODE,delta=2
    10                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
    11                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    12                           	psect	maintext,global,class=CODE,split=1,delta=2
    13                           	psect	text1,local,class=CODE,merge=1,delta=2
    14                           	psect	text2,local,class=CODE,merge=1,delta=2
    15                           	psect	text3,local,class=CODE,merge=1,delta=2
    16                           	psect	text4,local,class=CODE,merge=1,delta=2
    17                           	psect	text5,local,class=CODE,merge=1,delta=2
    18                           	psect	intentry,global,class=CODE,delta=2
    19                           	psect	text6,local,class=CODE,merge=1,delta=2
    20                           	psect	text7,local,class=CODE,merge=1,delta=2
    21                           	psect	text8,local,class=CODE,merge=1,delta=2
    22                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    23                           	dabs	1,0x7E,2
    24  0000                     
    25                           ; Version 2.20
    26                           ; Generated 12/02/2020 GMT
    27                           ; 
    28                           ; Copyright Â© 2020, Microchip Technology Inc. and its subsidiaries ("Microchip")
    29                           ; All rights reserved.
    30                           ; 
    31                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    32                           ; 
    33                           ; Redistribution and use in source and binary forms, with or without modification, are
    34                           ; permitted provided that the following conditions are met:
    35                           ; 
    36                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    37                           ;        conditions and the following disclaimer.
    38                           ; 
    39                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    40                           ;        of conditions and the following disclaimer in the documentation and/or other
    41                           ;        materials provided with the distribution.
    42                           ; 
    43                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    44                           ;        software without specific prior written permission.
    45                           ; 
    46                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    47                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    48                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    49                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    50                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    51                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    52                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    53                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    54                           ; 
    55                           ; 
    56                           ; Code-generator required, PIC16F887 Definitions
    57                           ; 
    58                           ; SFR Addresses
    59  0000                     	;# 
    60  0001                     	;# 
    61  0002                     	;# 
    62  0003                     	;# 
    63  0004                     	;# 
    64  0005                     	;# 
    65  0006                     	;# 
    66  0007                     	;# 
    67  0008                     	;# 
    68  0009                     	;# 
    69  000A                     	;# 
    70  000B                     	;# 
    71  000C                     	;# 
    72  000D                     	;# 
    73  000E                     	;# 
    74  000E                     	;# 
    75  000F                     	;# 
    76  0010                     	;# 
    77  0011                     	;# 
    78  0012                     	;# 
    79  0013                     	;# 
    80  0014                     	;# 
    81  0015                     	;# 
    82  0015                     	;# 
    83  0016                     	;# 
    84  0017                     	;# 
    85  0018                     	;# 
    86  0019                     	;# 
    87  001A                     	;# 
    88  001B                     	;# 
    89  001B                     	;# 
    90  001C                     	;# 
    91  001D                     	;# 
    92  001E                     	;# 
    93  001F                     	;# 
    94  0081                     	;# 
    95  0085                     	;# 
    96  0086                     	;# 
    97  0087                     	;# 
    98  0088                     	;# 
    99  0089                     	;# 
   100  008C                     	;# 
   101  008D                     	;# 
   102  008E                     	;# 
   103  008F                     	;# 
   104  0090                     	;# 
   105  0091                     	;# 
   106  0092                     	;# 
   107  0093                     	;# 
   108  0093                     	;# 
   109  0093                     	;# 
   110  0094                     	;# 
   111  0095                     	;# 
   112  0096                     	;# 
   113  0097                     	;# 
   114  0098                     	;# 
   115  0099                     	;# 
   116  009A                     	;# 
   117  009B                     	;# 
   118  009C                     	;# 
   119  009D                     	;# 
   120  009E                     	;# 
   121  009F                     	;# 
   122  0105                     	;# 
   123  0107                     	;# 
   124  0108                     	;# 
   125  0109                     	;# 
   126  010C                     	;# 
   127  010C                     	;# 
   128  010D                     	;# 
   129  010E                     	;# 
   130  010F                     	;# 
   131  0185                     	;# 
   132  0187                     	;# 
   133  0188                     	;# 
   134  0189                     	;# 
   135  018C                     	;# 
   136  018D                     	;# 
   137  0000                     	;# 
   138  0001                     	;# 
   139  0002                     	;# 
   140  0003                     	;# 
   141  0004                     	;# 
   142  0005                     	;# 
   143  0006                     	;# 
   144  0007                     	;# 
   145  0008                     	;# 
   146  0009                     	;# 
   147  000A                     	;# 
   148  000B                     	;# 
   149  000C                     	;# 
   150  000D                     	;# 
   151  000E                     	;# 
   152  000E                     	;# 
   153  000F                     	;# 
   154  0010                     	;# 
   155  0011                     	;# 
   156  0012                     	;# 
   157  0013                     	;# 
   158  0014                     	;# 
   159  0015                     	;# 
   160  0015                     	;# 
   161  0016                     	;# 
   162  0017                     	;# 
   163  0018                     	;# 
   164  0019                     	;# 
   165  001A                     	;# 
   166  001B                     	;# 
   167  001B                     	;# 
   168  001C                     	;# 
   169  001D                     	;# 
   170  001E                     	;# 
   171  001F                     	;# 
   172  0081                     	;# 
   173  0085                     	;# 
   174  0086                     	;# 
   175  0087                     	;# 
   176  0088                     	;# 
   177  0089                     	;# 
   178  008C                     	;# 
   179  008D                     	;# 
   180  008E                     	;# 
   181  008F                     	;# 
   182  0090                     	;# 
   183  0091                     	;# 
   184  0092                     	;# 
   185  0093                     	;# 
   186  0093                     	;# 
   187  0093                     	;# 
   188  0094                     	;# 
   189  0095                     	;# 
   190  0096                     	;# 
   191  0097                     	;# 
   192  0098                     	;# 
   193  0099                     	;# 
   194  009A                     	;# 
   195  009B                     	;# 
   196  009C                     	;# 
   197  009D                     	;# 
   198  009E                     	;# 
   199  009F                     	;# 
   200  0105                     	;# 
   201  0107                     	;# 
   202  0108                     	;# 
   203  0109                     	;# 
   204  010C                     	;# 
   205  010C                     	;# 
   206  010D                     	;# 
   207  010E                     	;# 
   208  010F                     	;# 
   209  0185                     	;# 
   210  0187                     	;# 
   211  0188                     	;# 
   212  0189                     	;# 
   213  018C                     	;# 
   214  018D                     	;# 
   215  0000                     	;# 
   216  0001                     	;# 
   217  0002                     	;# 
   218  0003                     	;# 
   219  0004                     	;# 
   220  0005                     	;# 
   221  0006                     	;# 
   222  0007                     	;# 
   223  0008                     	;# 
   224  0009                     	;# 
   225  000A                     	;# 
   226  000B                     	;# 
   227  000C                     	;# 
   228  000D                     	;# 
   229  000E                     	;# 
   230  000E                     	;# 
   231  000F                     	;# 
   232  0010                     	;# 
   233  0011                     	;# 
   234  0012                     	;# 
   235  0013                     	;# 
   236  0014                     	;# 
   237  0015                     	;# 
   238  0015                     	;# 
   239  0016                     	;# 
   240  0017                     	;# 
   241  0018                     	;# 
   242  0019                     	;# 
   243  001A                     	;# 
   244  001B                     	;# 
   245  001B                     	;# 
   246  001C                     	;# 
   247  001D                     	;# 
   248  001E                     	;# 
   249  001F                     	;# 
   250  0081                     	;# 
   251  0085                     	;# 
   252  0086                     	;# 
   253  0087                     	;# 
   254  0088                     	;# 
   255  0089                     	;# 
   256  008C                     	;# 
   257  008D                     	;# 
   258  008E                     	;# 
   259  008F                     	;# 
   260  0090                     	;# 
   261  0091                     	;# 
   262  0092                     	;# 
   263  0093                     	;# 
   264  0093                     	;# 
   265  0093                     	;# 
   266  0094                     	;# 
   267  0095                     	;# 
   268  0096                     	;# 
   269  0097                     	;# 
   270  0098                     	;# 
   271  0099                     	;# 
   272  009A                     	;# 
   273  009B                     	;# 
   274  009C                     	;# 
   275  009D                     	;# 
   276  009E                     	;# 
   277  009F                     	;# 
   278  0105                     	;# 
   279  0107                     	;# 
   280  0108                     	;# 
   281  0109                     	;# 
   282  010C                     	;# 
   283  010C                     	;# 
   284  010D                     	;# 
   285  010E                     	;# 
   286  010F                     	;# 
   287  0185                     	;# 
   288  0187                     	;# 
   289  0188                     	;# 
   290  0189                     	;# 
   291  018C                     	;# 
   292  018D                     	;# 
   293  0000                     	;# 
   294  0001                     	;# 
   295  0002                     	;# 
   296  0003                     	;# 
   297  0004                     	;# 
   298  0005                     	;# 
   299  0006                     	;# 
   300  0007                     	;# 
   301  0008                     	;# 
   302  0009                     	;# 
   303  000A                     	;# 
   304  000B                     	;# 
   305  000C                     	;# 
   306  000D                     	;# 
   307  000E                     	;# 
   308  000E                     	;# 
   309  000F                     	;# 
   310  0010                     	;# 
   311  0011                     	;# 
   312  0012                     	;# 
   313  0013                     	;# 
   314  0014                     	;# 
   315  0015                     	;# 
   316  0015                     	;# 
   317  0016                     	;# 
   318  0017                     	;# 
   319  0018                     	;# 
   320  0019                     	;# 
   321  001A                     	;# 
   322  001B                     	;# 
   323  001B                     	;# 
   324  001C                     	;# 
   325  001D                     	;# 
   326  001E                     	;# 
   327  001F                     	;# 
   328  0081                     	;# 
   329  0085                     	;# 
   330  0086                     	;# 
   331  0087                     	;# 
   332  0088                     	;# 
   333  0089                     	;# 
   334  008C                     	;# 
   335  008D                     	;# 
   336  008E                     	;# 
   337  008F                     	;# 
   338  0090                     	;# 
   339  0091                     	;# 
   340  0092                     	;# 
   341  0093                     	;# 
   342  0093                     	;# 
   343  0093                     	;# 
   344  0094                     	;# 
   345  0095                     	;# 
   346  0096                     	;# 
   347  0097                     	;# 
   348  0098                     	;# 
   349  0099                     	;# 
   350  009A                     	;# 
   351  009B                     	;# 
   352  009C                     	;# 
   353  009D                     	;# 
   354  009E                     	;# 
   355  009F                     	;# 
   356  0105                     	;# 
   357  0107                     	;# 
   358  0108                     	;# 
   359  0109                     	;# 
   360  010C                     	;# 
   361  010C                     	;# 
   362  010D                     	;# 
   363  010E                     	;# 
   364  010F                     	;# 
   365  0185                     	;# 
   366  0187                     	;# 
   367  0188                     	;# 
   368  0189                     	;# 
   369  018C                     	;# 
   370  018D                     	;# 
   371                           
   372                           	psect	idataBANK0
   373  01BD                     __pidataBANK0:
   374                           
   375                           ;initializer for tabla7@tabla
   376  01BD  3477               	retlw	119
   377  01BE  3441               	retlw	65
   378  01BF  343B               	retlw	59
   379  01C0  346B               	retlw	107
   380  01C1  344D               	retlw	77
   381  01C2  346E               	retlw	110
   382  01C3  347E               	retlw	126
   383  01C4  3443               	retlw	67
   384  01C5  347F               	retlw	127
   385  01C6  346F               	retlw	111
   386  01C7  345F               	retlw	95
   387  01C8  347C               	retlw	124
   388  01C9  3436               	retlw	54
   389  01CA  3479               	retlw	121
   390  01CB  343E               	retlw	62
   391  01CC  341E               	retlw	30
   392  000B                     _INTCON	set	11
   393  000C                     _PIR1bits	set	12
   394  0006                     _PORTB	set	6
   395  0008                     _PORTDbits	set	8
   396  0008                     _PORTD	set	8
   397  0007                     _PORTC	set	7
   398  0001                     _TMR0	set	1
   399  0005                     _PORTA	set	5
   400  0006                     _PORTBbits	set	6
   401  000B                     _INTCONbits	set	11
   402  001F                     _ADCON0bits	set	31
   403  001E                     _ADRESH	set	30
   404  0066                     _ADIF	set	102
   405  0081                     _OPTION_REG	set	129
   406  008C                     _PIE1bits	set	140
   407  009F                     _ADCON1bits	set	159
   408  0096                     _IOCBbits	set	150
   409  0089                     _TRISEbits	set	137
   410  0088                     _TRISD	set	136
   411  0087                     _TRISC	set	135
   412  0086                     _TRISB	set	134
   413  0085                     _TRISA	set	133
   414  0188                     _ANSELbits	set	392
   415  0189                     _ANSELH	set	393
   416  0188                     _ANSEL	set	392
   417                           
   418                           	psect	cinit
   419  0011                     start_initialization:	
   420                           ; #config settings
   421                           
   422  0011                     __initialization:
   423                           
   424                           ; Initialize objects allocated to BANK0
   425  0011  1383               	bcf	3,7	;select IRP bank0
   426  0012  3030               	movlw	low (__pdataBANK0+16)
   427  0013  00FD               	movwf	btemp+-1
   428  0014  3001               	movlw	high __pidataBANK0
   429  0015  00FE               	movwf	btemp
   430  0016  30BD               	movlw	low __pidataBANK0
   431  0017  00FF               	movwf	btemp+1
   432  0018  3020               	movlw	low __pdataBANK0
   433  0019  0084               	movwf	4
   434  001A  120A  118A  21AE  120A  118A  	fcall	init_ram0
   435                           
   436                           ; Clear objects allocated to BANK0
   437  001F  01B0               	clrf	__pbssBANK0& (0+127)
   438                           
   439                           ; Clear objects allocated to COMMON
   440  0020  01F9               	clrf	__pbssCOMMON& (0+127)
   441  0021  01FA               	clrf	(__pbssCOMMON+1)& (0+127)
   442  0022  01FB               	clrf	(__pbssCOMMON+2)& (0+127)
   443  0023  01FC               	clrf	(__pbssCOMMON+3)& (0+127)
   444  0024  01FD               	clrf	(__pbssCOMMON+4)& (0+127)
   445  0025                     end_of_initialization:	
   446                           ;End of C runtime variable initialization code
   447                           
   448  0025                     __end_of__initialization:
   449  0025  0183               	clrf	3
   450  0026  120A  118A  293F   	ljmp	_main	;jump to C main() function
   451                           
   452                           	psect	bssCOMMON
   453  0079                     __pbssCOMMON:
   454  0079                     _Nibble2:
   455  0079                     	ds	1
   456  007A                     _Nibble1:
   457  007A                     	ds	1
   458  007B                     _debounce2:
   459  007B                     	ds	1
   460  007C                     _debounce1:
   461  007C                     	ds	1
   462  007D                     _varADC:
   463  007D                     	ds	1
   464                           
   465                           	psect	bssBANK0
   466  0030                     __pbssBANK0:
   467  0030                     _var1:
   468  0030                     	ds	1
   469                           
   470                           	psect	dataBANK0
   471  0020                     __pdataBANK0:
   472  0020                     tabla7@tabla:
   473  0020                     	ds	16
   474                           
   475                           	psect	inittext
   476  01AA                     init_fetch0:	
   477                           ;	Called with low address in FSR and high address in W
   478                           
   479  01AA  087E               	movf	btemp,w
   480  01AB  008A               	movwf	10
   481  01AC  087F               	movf	btemp+1,w
   482  01AD  0082               	movwf	2
   483  01AE                     init_ram0:	
   484                           ;Called with:
   485                           ;	high address of idata address in btemp 
   486                           ;	low address of idata address in btemp+1 
   487                           ;	low address of data in FSR
   488                           ;	high address + 1 of data in btemp-1
   489                           
   490  01AE  120A  118A  21AA  120A  118A  	fcall	init_fetch0
   491  01B3  0080               	movwf	0
   492  01B4  0A84               	incf	4,f
   493  01B5  0804               	movf	4,w
   494  01B6  067D               	xorwf	btemp+-1,w
   495  01B7  1903               	btfsc	3,2
   496  01B8  3400               	retlw	0
   497  01B9  0AFF               	incf	btemp+1,f
   498  01BA  1903               	btfsc	3,2
   499  01BB  0AFE               	incf	btemp,f
   500  01BC  29AE               	goto	init_ram0
   501                           
   502                           	psect	cstackCOMMON
   503  0070                     __pcstackCOMMON:
   504  0070                     ?_NibbleH:
   505  0070                     ??_NibbleH:	
   506                           ; 1 bytes @ 0x0
   507                           
   508  0070                     ?_NibbleL:	
   509                           ; 1 bytes @ 0x0
   510                           
   511  0070                     ??_NibbleL:	
   512                           ; 1 bytes @ 0x0
   513                           
   514  0070                     ?_tabla7:	
   515                           ; 1 bytes @ 0x0
   516                           
   517  0070                     ??_tabla7:	
   518                           ; 1 bytes @ 0x0
   519                           
   520  0070                     ?_Setup:	
   521                           ; 1 bytes @ 0x0
   522                           
   523  0070                     ?_multiplexor:	
   524                           ; 1 bytes @ 0x0
   525                           
   526  0070                     ?_configADC:	
   527                           ; 1 bytes @ 0x0
   528                           
   529  0070                     ?_canalADC:	
   530                           ; 1 bytes @ 0x0
   531                           
   532  0070                     ?_ISR:	
   533                           ; 1 bytes @ 0x0
   534                           
   535  0070                     ?_main:	
   536                           ; 1 bytes @ 0x0
   537                           
   538  0070                     tabla7@entrada:	
   539                           ; 1 bytes @ 0x0
   540                           
   541                           
   542                           ; 1 bytes @ 0x0
   543  0070                     	ds	1
   544  0071                     NibbleH@ValorADC:
   545                           
   546                           ; 1 bytes @ 0x1
   547  0071                     	ds	1
   548  0072                     NibbleH@NibbleH:
   549  0072                     NibbleL@ValorADC:	
   550                           ; 1 bytes @ 0x2
   551                           
   552                           
   553                           ; 1 bytes @ 0x2
   554  0072                     	ds	1
   555  0073                     NibbleL@NibbleL:
   556                           
   557                           ; 1 bytes @ 0x3
   558  0073                     	ds	1
   559  0074                     NibbleL@aux:
   560                           
   561                           ; 1 bytes @ 0x4
   562  0074                     	ds	1
   563  0075                     ??_ISR:
   564                           
   565                           ; 1 bytes @ 0x5
   566  0075                     	ds	4
   567                           
   568                           	psect	cstackBANK0
   569  0031                     __pcstackBANK0:
   570  0031                     ??_Setup:
   571  0031                     ??_multiplexor:	
   572                           ; 1 bytes @ 0x0
   573                           
   574  0031                     ??_configADC:	
   575                           ; 1 bytes @ 0x0
   576                           
   577  0031                     ??_canalADC:	
   578                           ; 1 bytes @ 0x0
   579                           
   580  0031                     canalADC@canal:	
   581                           ; 1 bytes @ 0x0
   582                           
   583                           
   584                           ; 1 bytes @ 0x0
   585  0031                     	ds	1
   586  0032                     ??_main:
   587                           
   588                           	psect	maintext
   589  013F                     __pmaintext:	
   590                           ; 1 bytes @ 0x1
   591 ;;
   592 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   593 ;;
   594 ;; *************** function _main *****************
   595 ;; Defined at:
   596 ;;		line 123 in file "main.c"
   597 ;; Parameters:    Size  Location     Type
   598 ;;		None
   599 ;; Auto vars:     Size  Location     Type
   600 ;;		None
   601 ;; Return value:  Size  Location     Type
   602 ;;                  1    wreg      void 
   603 ;; Registers used:
   604 ;;		wreg, status,2, status,0, pclath, cstack
   605 ;; Tracked objects:
   606 ;;		On entry : B00/0
   607 ;;		On exit  : 0/0
   608 ;;		Unchanged: 0/0
   609 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   610 ;;      Params:         0       0       0       0       0
   611 ;;      Locals:         0       0       0       0       0
   612 ;;      Temps:          0       0       0       0       0
   613 ;;      Totals:         0       0       0       0       0
   614 ;;Total ram usage:        0 bytes
   615 ;; Hardware stack levels required when called:    3
   616 ;; This function calls:
   617 ;;		_Setup
   618 ;;		_canalADC
   619 ;;		_configADC
   620 ;;		_multiplexor
   621 ;; This function is called by:
   622 ;;		Startup code after reset
   623 ;; This function uses a non-reentrant model
   624 ;;
   625                           
   626                           
   627                           ;psect for function _main
   628  013F                     _main:
   629  013F                     l1086:	
   630                           ;incstack = 0
   631                           ; Regs used in _main: [wreg+status,2+status,0+pclath+cstack]
   632                           
   633  013F  120A  118A  2161  120A  118A  	fcall	_Setup
   634  0144  120A  118A  21CD  120A  118A  	fcall	_multiplexor
   635  0149                     l1088:
   636  0149  120A  118A  2195  120A  118A  	fcall	_configADC
   637  014E                     l1090:
   638  014E  3005               	movlw	5
   639  014F  120A  118A  2029  120A  118A  	fcall	_canalADC
   640  0154                     l1092:
   641                           
   642                           ;main.c: 139:         if(var1 == varADC){
   643  0154  1283               	bcf	3,5	;RP0=0, select bank0
   644  0155  1303               	bcf	3,6	;RP1=0, select bank0
   645  0156  0830               	movf	_var1,w
   646  0157  067D               	xorwf	_varADC,w	;volatile
   647  0158  1D03               	skipz
   648  0159  295B               	goto	u501
   649  015A  295C               	goto	u500
   650  015B                     u501:
   651  015B  2954               	goto	l1092
   652  015C                     u500:
   653  015C                     l1094:
   654                           
   655                           ;main.c: 140:             PORTDbits.RD2 = 1;
   656  015C  1508               	bsf	8,2	;volatile
   657                           
   658                           ;main.c: 142:         }
   659  015D  2954               	goto	l1092
   660  015E  120A  118A  280E   	ljmp	start
   661  0161                     __end_of_main:
   662                           
   663                           	psect	text1
   664  01CD                     __ptext1:	
   665 ;; *************** function _multiplexor *****************
   666 ;; Defined at:
   667 ;;		line 37 in file "display7.c"
   668 ;; Parameters:    Size  Location     Type
   669 ;;		None
   670 ;; Auto vars:     Size  Location     Type
   671 ;;		None
   672 ;; Return value:  Size  Location     Type
   673 ;;                  1    wreg      void 
   674 ;; Registers used:
   675 ;;		wreg
   676 ;; Tracked objects:
   677 ;;		On entry : 0/0
   678 ;;		On exit  : 0/0
   679 ;;		Unchanged: 0/0
   680 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   681 ;;      Params:         0       0       0       0       0
   682 ;;      Locals:         0       0       0       0       0
   683 ;;      Temps:          0       0       0       0       0
   684 ;;      Totals:         0       0       0       0       0
   685 ;;Total ram usage:        0 bytes
   686 ;; Hardware stack levels used:    1
   687 ;; Hardware stack levels required when called:    2
   688 ;; This function calls:
   689 ;;		Nothing
   690 ;; This function is called by:
   691 ;;		_main
   692 ;; This function uses a non-reentrant model
   693 ;;
   694                           
   695                           
   696                           ;psect for function _multiplexor
   697  01CD                     _multiplexor:
   698  01CD                     l968:	
   699                           ;incstack = 0
   700                           ; Regs used in _multiplexor: [wreg]
   701                           
   702                           
   703                           ;display7.c: 38:     OPTION_REG = 0x86;
   704  01CD  3086               	movlw	134
   705  01CE  1683               	bsf	3,5	;RP0=1, select bank1
   706  01CF  1303               	bcf	3,6	;RP1=0, select bank1
   707  01D0  0081               	movwf	1	;volatile
   708                           
   709                           ;display7.c: 39:     TMR0 = 61;
   710  01D1  303D               	movlw	61
   711  01D2  1283               	bcf	3,5	;RP0=0, select bank0
   712  01D3  1303               	bcf	3,6	;RP1=0, select bank0
   713  01D4  0081               	movwf	1	;volatile
   714                           
   715                           ;display7.c: 40:     INTCON = 0xA0;
   716  01D5  30A0               	movlw	160
   717  01D6  008B               	movwf	11	;volatile
   718  01D7                     l138:
   719  01D7  0008               	return
   720  01D8                     __end_of_multiplexor:
   721                           
   722                           	psect	text2
   723  0195                     __ptext2:	
   724 ;; *************** function _configADC *****************
   725 ;; Defined at:
   726 ;;		line 140 in file "ADC.c"
   727 ;; Parameters:    Size  Location     Type
   728 ;;		None
   729 ;; Auto vars:     Size  Location     Type
   730 ;;		None
   731 ;; Return value:  Size  Location     Type
   732 ;;                  1    wreg      void 
   733 ;; Registers used:
   734 ;;		None
   735 ;; Tracked objects:
   736 ;;		On entry : 0/0
   737 ;;		On exit  : 0/0
   738 ;;		Unchanged: 0/0
   739 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   740 ;;      Params:         0       0       0       0       0
   741 ;;      Locals:         0       0       0       0       0
   742 ;;      Temps:          0       0       0       0       0
   743 ;;      Totals:         0       0       0       0       0
   744 ;;Total ram usage:        0 bytes
   745 ;; Hardware stack levels used:    1
   746 ;; Hardware stack levels required when called:    2
   747 ;; This function calls:
   748 ;;		Nothing
   749 ;; This function is called by:
   750 ;;		_main
   751 ;; This function uses a non-reentrant model
   752 ;;
   753                           
   754                           
   755                           ;psect for function _configADC
   756  0195                     _configADC:
   757  0195                     l970:	
   758                           ;incstack = 0
   759                           ; Regs used in _configADC: []
   760                           
   761                           
   762                           ;ADC.c: 142:     ADCON0bits.ADCS0 = 1;
   763  0195  1283               	bcf	3,5	;RP0=0, select bank0
   764  0196  1303               	bcf	3,6	;RP1=0, select bank0
   765  0197  171F               	bsf	31,6	;volatile
   766                           
   767                           ;ADC.c: 143:     ADCON0bits.ADCS1 = 0;
   768  0198  139F               	bcf	31,7	;volatile
   769                           
   770                           ;ADC.c: 145:     ADCON1bits.VCFG0 = 0;
   771  0199  1683               	bsf	3,5	;RP0=1, select bank1
   772  019A  1303               	bcf	3,6	;RP1=0, select bank1
   773  019B  121F               	bcf	31,4	;volatile
   774                           
   775                           ;ADC.c: 146:     ADCON1bits.VCFG1 = 0;
   776  019C  129F               	bcf	31,5	;volatile
   777                           
   778                           ;ADC.c: 148:     ADCON1bits.ADFM = 0;
   779  019D  139F               	bcf	31,7	;volatile
   780                           
   781                           ;ADC.c: 150:     PIR1bits.ADIF = 0;
   782  019E  1283               	bcf	3,5	;RP0=0, select bank0
   783  019F  1303               	bcf	3,6	;RP1=0, select bank0
   784  01A0  130C               	bcf	12,6	;volatile
   785                           
   786                           ;ADC.c: 151:     PIE1bits.ADIE = 1;
   787  01A1  1683               	bsf	3,5	;RP0=1, select bank1
   788  01A2  1303               	bcf	3,6	;RP1=0, select bank1
   789  01A3  170C               	bsf	12,6	;volatile
   790                           
   791                           ;ADC.c: 152:     INTCONbits.GIE = 1;
   792  01A4  178B               	bsf	11,7	;volatile
   793                           
   794                           ;ADC.c: 153:     INTCONbits.PEIE = 1;
   795  01A5  170B               	bsf	11,6	;volatile
   796                           
   797                           ;ADC.c: 155:     ADCON0bits.ADON = 1;
   798  01A6  1283               	bcf	3,5	;RP0=0, select bank0
   799  01A7  1303               	bcf	3,6	;RP1=0, select bank0
   800  01A8  141F               	bsf	31,0	;volatile
   801  01A9                     l124:
   802  01A9  0008               	return
   803  01AA                     __end_of_configADC:
   804                           
   805                           	psect	text3
   806  0029                     __ptext3:	
   807 ;; *************** function _canalADC *****************
   808 ;; Defined at:
   809 ;;		line 13 in file "ADC.c"
   810 ;; Parameters:    Size  Location     Type
   811 ;;  canal           1    wreg     unsigned char 
   812 ;; Auto vars:     Size  Location     Type
   813 ;;  canal           1    0[BANK0 ] unsigned char 
   814 ;; Return value:  Size  Location     Type
   815 ;;                  1    wreg      void 
   816 ;; Registers used:
   817 ;;		wreg, status,2, status,0
   818 ;; Tracked objects:
   819 ;;		On entry : 0/0
   820 ;;		On exit  : 0/0
   821 ;;		Unchanged: 0/0
   822 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   823 ;;      Params:         0       0       0       0       0
   824 ;;      Locals:         0       1       0       0       0
   825 ;;      Temps:          0       0       0       0       0
   826 ;;      Totals:         0       1       0       0       0
   827 ;;Total ram usage:        1 bytes
   828 ;; Hardware stack levels used:    1
   829 ;; Hardware stack levels required when called:    2
   830 ;; This function calls:
   831 ;;		Nothing
   832 ;; This function is called by:
   833 ;;		_main
   834 ;; This function uses a non-reentrant model
   835 ;;
   836                           
   837                           
   838                           ;psect for function _canalADC
   839  0029                     _canalADC:
   840                           
   841                           ;incstack = 0
   842                           ; Regs used in _canalADC: [wreg+status,2+status,0]
   843                           ;canalADC@canal stored from wreg
   844  0029  1283               	bcf	3,5	;RP0=0, select bank0
   845  002A  1303               	bcf	3,6	;RP1=0, select bank0
   846  002B  00B1               	movwf	canalADC@canal
   847  002C                     l972:
   848                           
   849                           ;ADC.c: 15:     if (canal == 0) {
   850  002C  0831               	movf	canalADC@canal,w
   851  002D  1D03               	btfss	3,2
   852  002E  2830               	goto	u271
   853  002F  2831               	goto	u270
   854  0030                     u271:
   855  0030  2835               	goto	l976
   856  0031                     u270:
   857  0031                     l974:
   858                           
   859                           ;ADC.c: 16:         ADCON0bits.CHS3 = 0;
   860  0031  129F               	bcf	31,5	;volatile
   861                           
   862                           ;ADC.c: 17:         ADCON0bits.CHS2 = 0;
   863  0032  121F               	bcf	31,4	;volatile
   864                           
   865                           ;ADC.c: 18:         ADCON0bits.CHS1 = 0;
   866  0033  119F               	bcf	31,3	;volatile
   867                           
   868                           ;ADC.c: 19:         ADCON0bits.CHS0 = 0;
   869  0034  111F               	bcf	31,2	;volatile
   870  0035                     l976:
   871                           
   872                           ;ADC.c: 23:     if (canal == 1) {
   873  0035  0331               	decf	canalADC@canal,w
   874  0036  1D03               	btfss	3,2
   875  0037  2839               	goto	u281
   876  0038  283A               	goto	u280
   877  0039                     u281:
   878  0039  283E               	goto	l980
   879  003A                     u280:
   880  003A                     l978:
   881                           
   882                           ;ADC.c: 24:         ADCON0bits.CHS3 = 0;
   883  003A  129F               	bcf	31,5	;volatile
   884                           
   885                           ;ADC.c: 25:         ADCON0bits.CHS2 = 0;
   886  003B  121F               	bcf	31,4	;volatile
   887                           
   888                           ;ADC.c: 26:         ADCON0bits.CHS1 = 0;
   889  003C  119F               	bcf	31,3	;volatile
   890                           
   891                           ;ADC.c: 27:         ADCON0bits.CHS0 = 1;
   892  003D  151F               	bsf	31,2	;volatile
   893  003E                     l980:
   894                           
   895                           ;ADC.c: 32:     if (canal == 2) {
   896  003E  3002               	movlw	2
   897  003F  0631               	xorwf	canalADC@canal,w
   898  0040  1D03               	btfss	3,2
   899  0041  2843               	goto	u291
   900  0042  2844               	goto	u290
   901  0043                     u291:
   902  0043  2848               	goto	l984
   903  0044                     u290:
   904  0044                     l982:
   905                           
   906                           ;ADC.c: 33:         ADCON0bits.CHS3 = 0;
   907  0044  129F               	bcf	31,5	;volatile
   908                           
   909                           ;ADC.c: 34:         ADCON0bits.CHS2 = 0;
   910  0045  121F               	bcf	31,4	;volatile
   911                           
   912                           ;ADC.c: 35:         ADCON0bits.CHS1 = 1;
   913  0046  159F               	bsf	31,3	;volatile
   914                           
   915                           ;ADC.c: 36:         ADCON0bits.CHS0 = 0;
   916  0047  111F               	bcf	31,2	;volatile
   917  0048                     l984:
   918                           
   919                           ;ADC.c: 41:     if (canal == 3) {
   920  0048  3003               	movlw	3
   921  0049  0631               	xorwf	canalADC@canal,w
   922  004A  1D03               	btfss	3,2
   923  004B  284D               	goto	u301
   924  004C  284E               	goto	u300
   925  004D                     u301:
   926  004D  2852               	goto	l988
   927  004E                     u300:
   928  004E                     l986:
   929                           
   930                           ;ADC.c: 42:         ADCON0bits.CHS3 = 0;
   931  004E  129F               	bcf	31,5	;volatile
   932                           
   933                           ;ADC.c: 43:         ADCON0bits.CHS2 = 0;
   934  004F  121F               	bcf	31,4	;volatile
   935                           
   936                           ;ADC.c: 44:         ADCON0bits.CHS1 = 1;
   937  0050  159F               	bsf	31,3	;volatile
   938                           
   939                           ;ADC.c: 45:         ADCON0bits.CHS0 = 1;
   940  0051  151F               	bsf	31,2	;volatile
   941  0052                     l988:
   942                           
   943                           ;ADC.c: 50:     if (canal == 4) {
   944  0052  3004               	movlw	4
   945  0053  0631               	xorwf	canalADC@canal,w
   946  0054  1D03               	btfss	3,2
   947  0055  2857               	goto	u311
   948  0056  2858               	goto	u310
   949  0057                     u311:
   950  0057  285C               	goto	l992
   951  0058                     u310:
   952  0058                     l990:
   953                           
   954                           ;ADC.c: 51:         ADCON0bits.CHS3 = 0;
   955  0058  129F               	bcf	31,5	;volatile
   956                           
   957                           ;ADC.c: 52:         ADCON0bits.CHS2 = 1;
   958  0059  161F               	bsf	31,4	;volatile
   959                           
   960                           ;ADC.c: 53:         ADCON0bits.CHS1 = 0;
   961  005A  119F               	bcf	31,3	;volatile
   962                           
   963                           ;ADC.c: 54:         ADCON0bits.CHS0 = 0;
   964  005B  111F               	bcf	31,2	;volatile
   965  005C                     l992:
   966                           
   967                           ;ADC.c: 59:     if (canal == 5) {
   968  005C  3005               	movlw	5
   969  005D  0631               	xorwf	canalADC@canal,w
   970  005E  1D03               	btfss	3,2
   971  005F  2861               	goto	u321
   972  0060  2862               	goto	u320
   973  0061                     u321:
   974  0061  2866               	goto	l996
   975  0062                     u320:
   976  0062                     l994:
   977                           
   978                           ;ADC.c: 60:         ADCON0bits.CHS3 = 0;
   979  0062  129F               	bcf	31,5	;volatile
   980                           
   981                           ;ADC.c: 61:         ADCON0bits.CHS2 = 1;
   982  0063  161F               	bsf	31,4	;volatile
   983                           
   984                           ;ADC.c: 62:         ADCON0bits.CHS1 = 0;
   985  0064  119F               	bcf	31,3	;volatile
   986                           
   987                           ;ADC.c: 63:         ADCON0bits.CHS0 = 1;
   988  0065  151F               	bsf	31,2	;volatile
   989  0066                     l996:
   990                           
   991                           ;ADC.c: 68:     if (canal == 6) {
   992  0066  3006               	movlw	6
   993  0067  0631               	xorwf	canalADC@canal,w
   994  0068  1D03               	btfss	3,2
   995  0069  286B               	goto	u331
   996  006A  286C               	goto	u330
   997  006B                     u331:
   998  006B  2870               	goto	l1000
   999  006C                     u330:
  1000  006C                     l998:
  1001                           
  1002                           ;ADC.c: 69:         ADCON0bits.CHS3 = 0;
  1003  006C  129F               	bcf	31,5	;volatile
  1004                           
  1005                           ;ADC.c: 70:         ADCON0bits.CHS2 = 1;
  1006  006D  161F               	bsf	31,4	;volatile
  1007                           
  1008                           ;ADC.c: 71:         ADCON0bits.CHS1 = 1;
  1009  006E  159F               	bsf	31,3	;volatile
  1010                           
  1011                           ;ADC.c: 72:         ADCON0bits.CHS0 = 0;
  1012  006F  111F               	bcf	31,2	;volatile
  1013  0070                     l1000:
  1014                           
  1015                           ;ADC.c: 77:     if (canal == 7) {
  1016  0070  3007               	movlw	7
  1017  0071  0631               	xorwf	canalADC@canal,w
  1018  0072  1D03               	btfss	3,2
  1019  0073  2875               	goto	u341
  1020  0074  2876               	goto	u340
  1021  0075                     u341:
  1022  0075  287A               	goto	l1004
  1023  0076                     u340:
  1024  0076                     l1002:
  1025                           
  1026                           ;ADC.c: 78:         ADCON0bits.CHS3 = 0;
  1027  0076  129F               	bcf	31,5	;volatile
  1028                           
  1029                           ;ADC.c: 79:         ADCON0bits.CHS2 = 1;
  1030  0077  161F               	bsf	31,4	;volatile
  1031                           
  1032                           ;ADC.c: 80:         ADCON0bits.CHS1 = 1;
  1033  0078  159F               	bsf	31,3	;volatile
  1034                           
  1035                           ;ADC.c: 81:         ADCON0bits.CHS0 = 1;
  1036  0079  151F               	bsf	31,2	;volatile
  1037  007A                     l1004:
  1038                           
  1039                           ;ADC.c: 86:     if (canal == 8) {
  1040  007A  3008               	movlw	8
  1041  007B  0631               	xorwf	canalADC@canal,w
  1042  007C  1D03               	btfss	3,2
  1043  007D  287F               	goto	u351
  1044  007E  2880               	goto	u350
  1045  007F                     u351:
  1046  007F  2884               	goto	l1008
  1047  0080                     u350:
  1048  0080                     l1006:
  1049                           
  1050                           ;ADC.c: 87:         ADCON0bits.CHS3 = 1;
  1051  0080  169F               	bsf	31,5	;volatile
  1052                           
  1053                           ;ADC.c: 88:         ADCON0bits.CHS2 = 0;
  1054  0081  121F               	bcf	31,4	;volatile
  1055                           
  1056                           ;ADC.c: 89:         ADCON0bits.CHS1 = 0;
  1057  0082  119F               	bcf	31,3	;volatile
  1058                           
  1059                           ;ADC.c: 90:         ADCON0bits.CHS0 = 0;
  1060  0083  111F               	bcf	31,2	;volatile
  1061  0084                     l1008:
  1062                           
  1063                           ;ADC.c: 94:     if (canal == 9) {
  1064  0084  3009               	movlw	9
  1065  0085  0631               	xorwf	canalADC@canal,w
  1066  0086  1D03               	btfss	3,2
  1067  0087  2889               	goto	u361
  1068  0088  288A               	goto	u360
  1069  0089                     u361:
  1070  0089  288E               	goto	l1012
  1071  008A                     u360:
  1072  008A                     l1010:
  1073                           
  1074                           ;ADC.c: 95:         ADCON0bits.CHS3 = 1;
  1075  008A  169F               	bsf	31,5	;volatile
  1076                           
  1077                           ;ADC.c: 96:         ADCON0bits.CHS2 = 0;
  1078  008B  121F               	bcf	31,4	;volatile
  1079                           
  1080                           ;ADC.c: 97:         ADCON0bits.CHS1 = 0;
  1081  008C  119F               	bcf	31,3	;volatile
  1082                           
  1083                           ;ADC.c: 98:         ADCON0bits.CHS0 = 1;
  1084  008D  151F               	bsf	31,2	;volatile
  1085  008E                     l1012:
  1086                           
  1087                           ;ADC.c: 102:     if (canal == 10) {
  1088  008E  300A               	movlw	10
  1089  008F  0631               	xorwf	canalADC@canal,w
  1090  0090  1D03               	btfss	3,2
  1091  0091  2893               	goto	u371
  1092  0092  2894               	goto	u370
  1093  0093                     u371:
  1094  0093  2898               	goto	l1016
  1095  0094                     u370:
  1096  0094                     l1014:
  1097                           
  1098                           ;ADC.c: 103:         ADCON0bits.CHS3 = 1;
  1099  0094  169F               	bsf	31,5	;volatile
  1100                           
  1101                           ;ADC.c: 104:         ADCON0bits.CHS2 = 0;
  1102  0095  121F               	bcf	31,4	;volatile
  1103                           
  1104                           ;ADC.c: 105:         ADCON0bits.CHS1 = 1;
  1105  0096  159F               	bsf	31,3	;volatile
  1106                           
  1107                           ;ADC.c: 106:         ADCON0bits.CHS0 = 0;
  1108  0097  111F               	bcf	31,2	;volatile
  1109  0098                     l1016:
  1110                           
  1111                           ;ADC.c: 111:     if (canal == 11) {
  1112  0098  300B               	movlw	11
  1113  0099  0631               	xorwf	canalADC@canal,w
  1114  009A  1D03               	btfss	3,2
  1115  009B  289D               	goto	u381
  1116  009C  289E               	goto	u380
  1117  009D                     u381:
  1118  009D  28A2               	goto	l1020
  1119  009E                     u380:
  1120  009E                     l1018:
  1121                           
  1122                           ;ADC.c: 112:         ADCON0bits.CHS3 = 1;
  1123  009E  169F               	bsf	31,5	;volatile
  1124                           
  1125                           ;ADC.c: 113:         ADCON0bits.CHS2 = 0;
  1126  009F  121F               	bcf	31,4	;volatile
  1127                           
  1128                           ;ADC.c: 114:         ADCON0bits.CHS1 = 1;
  1129  00A0  159F               	bsf	31,3	;volatile
  1130                           
  1131                           ;ADC.c: 115:         ADCON0bits.CHS0 = 1;
  1132  00A1  151F               	bsf	31,2	;volatile
  1133  00A2                     l1020:
  1134                           
  1135                           ;ADC.c: 120:     if (canal == 12) {
  1136  00A2  300C               	movlw	12
  1137  00A3  0631               	xorwf	canalADC@canal,w
  1138  00A4  1D03               	btfss	3,2
  1139  00A5  28A7               	goto	u391
  1140  00A6  28A8               	goto	u390
  1141  00A7                     u391:
  1142  00A7  28AC               	goto	l1024
  1143  00A8                     u390:
  1144  00A8                     l1022:
  1145                           
  1146                           ;ADC.c: 121:         ADCON0bits.CHS3 = 1;
  1147  00A8  169F               	bsf	31,5	;volatile
  1148                           
  1149                           ;ADC.c: 122:         ADCON0bits.CHS2 = 1;
  1150  00A9  161F               	bsf	31,4	;volatile
  1151                           
  1152                           ;ADC.c: 123:         ADCON0bits.CHS1 = 0;
  1153  00AA  119F               	bcf	31,3	;volatile
  1154                           
  1155                           ;ADC.c: 124:         ADCON0bits.CHS0 = 0;
  1156  00AB  111F               	bcf	31,2	;volatile
  1157  00AC                     l1024:
  1158                           
  1159                           ;ADC.c: 129:     if (canal == 13) {
  1160  00AC  300D               	movlw	13
  1161  00AD  0631               	xorwf	canalADC@canal,w
  1162  00AE  1D03               	btfss	3,2
  1163  00AF  28B1               	goto	u401
  1164  00B0  28B2               	goto	u400
  1165  00B1                     u401:
  1166  00B1  28B6               	goto	l120
  1167  00B2                     u400:
  1168  00B2                     l1026:
  1169                           
  1170                           ;ADC.c: 130:         ADCON0bits.CHS3 = 1;
  1171  00B2  169F               	bsf	31,5	;volatile
  1172                           
  1173                           ;ADC.c: 131:         ADCON0bits.CHS2 = 1;
  1174  00B3  161F               	bsf	31,4	;volatile
  1175                           
  1176                           ;ADC.c: 132:         ADCON0bits.CHS1 = 0;
  1177  00B4  119F               	bcf	31,3	;volatile
  1178                           
  1179                           ;ADC.c: 133:         ADCON0bits.CHS0 = 1;
  1180  00B5  151F               	bsf	31,2	;volatile
  1181  00B6                     l120:	
  1182                           ;ADC.c: 135:     }
  1183                           
  1184                           
  1185                           ;ADC.c: 137:     ADCON0bits.GO = 1;
  1186  00B6  149F               	bsf	31,1	;volatile
  1187  00B7                     l121:
  1188  00B7  0008               	return
  1189  00B8                     __end_of_canalADC:
  1190                           
  1191                           	psect	text4
  1192  0161                     __ptext4:	
  1193 ;; *************** function _Setup *****************
  1194 ;; Defined at:
  1195 ;;		line 153 in file "main.c"
  1196 ;; Parameters:    Size  Location     Type
  1197 ;;		None
  1198 ;; Auto vars:     Size  Location     Type
  1199 ;;		None
  1200 ;; Return value:  Size  Location     Type
  1201 ;;                  1    wreg      void 
  1202 ;; Registers used:
  1203 ;;		wreg, status,2
  1204 ;; Tracked objects:
  1205 ;;		On entry : 0/0
  1206 ;;		On exit  : 0/0
  1207 ;;		Unchanged: 0/0
  1208 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1209 ;;      Params:         0       0       0       0       0
  1210 ;;      Locals:         0       0       0       0       0
  1211 ;;      Temps:          0       0       0       0       0
  1212 ;;      Totals:         0       0       0       0       0
  1213 ;;Total ram usage:        0 bytes
  1214 ;; Hardware stack levels used:    1
  1215 ;; Hardware stack levels required when called:    2
  1216 ;; This function calls:
  1217 ;;		Nothing
  1218 ;; This function is called by:
  1219 ;;		_main
  1220 ;; This function uses a non-reentrant model
  1221 ;;
  1222                           
  1223                           
  1224                           ;psect for function _Setup
  1225  0161                     _Setup:
  1226  0161                     l936:	
  1227                           ;incstack = 0
  1228                           ; Regs used in _Setup: [wreg+status,2]
  1229                           
  1230                           
  1231                           ;main.c: 155:     ANSEL = 0;
  1232  0161  1683               	bsf	3,5	;RP0=1, select bank3
  1233  0162  1703               	bsf	3,6	;RP1=1, select bank3
  1234  0163  0188               	clrf	8	;volatile
  1235                           
  1236                           ;main.c: 156:     ANSELH = 0;
  1237  0164  0189               	clrf	9	;volatile
  1238  0165                     l938:
  1239                           
  1240                           ;main.c: 157:     ANSELbits.ANS5 = 1;
  1241  0165  1688               	bsf	8,5	;volatile
  1242                           
  1243                           ;main.c: 159:     TRISA = 0;
  1244  0166  1683               	bsf	3,5	;RP0=1, select bank1
  1245  0167  1303               	bcf	3,6	;RP1=0, select bank1
  1246  0168  0185               	clrf	5	;volatile
  1247  0169                     l940:
  1248                           
  1249                           ;main.c: 160:     TRISB = 255;
  1250  0169  30FF               	movlw	255
  1251  016A  0086               	movwf	6	;volatile
  1252  016B                     l942:
  1253                           
  1254                           ;main.c: 161:     TRISC = 0;
  1255  016B  0187               	clrf	7	;volatile
  1256  016C                     l944:
  1257                           
  1258                           ;main.c: 162:     TRISD = 0;
  1259  016C  0188               	clrf	8	;volatile
  1260  016D                     l946:
  1261                           
  1262                           ;main.c: 163:     TRISEbits.TRISE0 = 1;
  1263  016D  1409               	bsf	9,0	;volatile
  1264  016E                     l948:
  1265                           
  1266                           ;main.c: 165:     PORTA = 0;
  1267  016E  1283               	bcf	3,5	;RP0=0, select bank0
  1268  016F  1303               	bcf	3,6	;RP1=0, select bank0
  1269  0170  0185               	clrf	5	;volatile
  1270  0171                     l950:
  1271                           
  1272                           ;main.c: 166:     PORTB = 0;
  1273  0171  0186               	clrf	6	;volatile
  1274  0172                     l952:
  1275                           
  1276                           ;main.c: 167:     PORTC = 0;
  1277  0172  0187               	clrf	7	;volatile
  1278  0173                     l954:
  1279                           
  1280                           ;main.c: 168:     PORTD = 0;
  1281  0173  0188               	clrf	8	;volatile
  1282  0174                     l956:
  1283                           
  1284                           ;main.c: 170:     IOCBbits.IOCB0 = 1;
  1285  0174  1683               	bsf	3,5	;RP0=1, select bank1
  1286  0175  1303               	bcf	3,6	;RP1=0, select bank1
  1287  0176  1416               	bsf	22,0	;volatile
  1288  0177                     l958:
  1289                           
  1290                           ;main.c: 171:     IOCBbits.IOCB1 = 1;
  1291  0177  1496               	bsf	22,1	;volatile
  1292  0178                     l960:
  1293                           
  1294                           ;main.c: 173:     INTCONbits.RBIE = 1;
  1295  0178  158B               	bsf	11,3	;volatile
  1296  0179                     l962:
  1297                           
  1298                           ;main.c: 174:     INTCONbits.GIE = 1;
  1299  0179  178B               	bsf	11,7	;volatile
  1300  017A                     l964:
  1301                           
  1302                           ;main.c: 175:     INTCONbits.PEIE = 1;
  1303  017A  170B               	bsf	11,6	;volatile
  1304  017B                     l966:
  1305                           
  1306                           ;main.c: 176:     INTCONbits.RBIF = 0;
  1307  017B  100B               	bcf	11,0	;volatile
  1308  017C                     l94:
  1309  017C  0008               	return
  1310  017D                     __end_of_Setup:
  1311                           
  1312                           	psect	text5
  1313  00B8                     __ptext5:	
  1314 ;; *************** function _ISR *****************
  1315 ;; Defined at:
  1316 ;;		line 54 in file "main.c"
  1317 ;; Parameters:    Size  Location     Type
  1318 ;;		None
  1319 ;; Auto vars:     Size  Location     Type
  1320 ;;		None
  1321 ;; Return value:  Size  Location     Type
  1322 ;;                  1    wreg      void 
  1323 ;; Registers used:
  1324 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1325 ;; Tracked objects:
  1326 ;;		On entry : 0/0
  1327 ;;		On exit  : 0/0
  1328 ;;		Unchanged: 0/0
  1329 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1330 ;;      Params:         0       0       0       0       0
  1331 ;;      Locals:         0       0       0       0       0
  1332 ;;      Temps:          4       0       0       0       0
  1333 ;;      Totals:         4       0       0       0       0
  1334 ;;Total ram usage:        4 bytes
  1335 ;; Hardware stack levels used:    1
  1336 ;; Hardware stack levels required when called:    1
  1337 ;; This function calls:
  1338 ;;		_NibbleH
  1339 ;;		_NibbleL
  1340 ;;		_tabla7
  1341 ;; This function is called by:
  1342 ;;		Interrupt level 1
  1343 ;; This function uses a non-reentrant model
  1344 ;;
  1345                           
  1346                           
  1347                           ;psect for function _ISR
  1348  00B8                     _ISR:
  1349  00B8                     i1l1028:
  1350                           
  1351                           ;main.c: 56: 
  1352  00B8  1283               	bcf	3,5	;RP0=0, select bank0
  1353  00B9  1303               	bcf	3,6	;RP1=0, select bank0
  1354  00BA  1F0C               	btfss	12,6	;volatile
  1355  00BB  28BD               	goto	u41_21
  1356  00BC  28BE               	goto	u41_20
  1357  00BD                     u41_21:
  1358  00BD  28C4               	goto	i1l1036
  1359  00BE                     u41_20:
  1360  00BE                     i1l1030:
  1361                           
  1362                           ;main.c: 58: 
  1363  00BE  081E               	movf	30,w	;volatile
  1364  00BF  00F5               	movwf	??_ISR
  1365  00C0  0875               	movf	??_ISR,w
  1366  00C1  00FD               	movwf	_varADC	;volatile
  1367  00C2                     i1l1032:
  1368                           
  1369                           ;main.c: 60: 
  1370  00C2  130C               	bcf	12,6	;volatile
  1371  00C3                     i1l1034:
  1372                           
  1373                           ;main.c: 61:     if (INTCONbits.TMR0IF == 1) {
  1374  00C3  149F               	bsf	31,1	;volatile
  1375  00C4                     i1l1036:
  1376                           
  1377                           ;main.c: 65:         Nibble1 = NibbleH(varADC);
  1378  00C4  1C0B               	btfss	11,0	;volatile
  1379  00C5  28C7               	goto	u42_21
  1380  00C6  28C8               	goto	u42_20
  1381  00C7                     u42_21:
  1382  00C7  28F3               	goto	i1l1062
  1383  00C8                     u42_20:
  1384  00C8                     i1l1038:
  1385                           
  1386                           ;main.c: 67: 
  1387  00C8  100B               	bcf	11,0	;volatile
  1388                           
  1389                           ;main.c: 69:             PORTD = 0;
  1390  00C9  1C86               	btfss	6,1	;volatile
  1391  00CA  28CC               	goto	u43_21
  1392  00CB  28CD               	goto	u43_20
  1393  00CC                     u43_21:
  1394  00CC  28DC               	goto	i1l1050
  1395  00CD                     u43_20:
  1396  00CD                     i1l1040:
  1397                           
  1398                           ;main.c: 70: 
  1399  00CD  3001               	movlw	1
  1400  00CE  00F5               	movwf	??_ISR
  1401  00CF  0875               	movf	??_ISR,w
  1402  00D0  07FB               	addwf	_debounce2,f
  1403  00D1                     i1l1042:
  1404                           
  1405                           ;main.c: 71: 
  1406  00D1  3002               	movlw	2
  1407  00D2  027B               	subwf	_debounce2,w
  1408  00D3  1C03               	skipc
  1409  00D4  28D6               	goto	u44_21
  1410  00D5  28D7               	goto	u44_20
  1411  00D6                     u44_21:
  1412  00D6  28DC               	goto	i1l1050
  1413  00D7                     u44_20:
  1414  00D7                     i1l1044:
  1415                           
  1416                           ;main.c: 72:         }
  1417  00D7  01FB               	clrf	_debounce2
  1418  00D8                     i1l1046:
  1419                           
  1420                           ;main.c: 73:         if (PORTD == 0) {
  1421  00D8  3001               	movlw	1
  1422  00D9  0285               	subwf	5,f	;volatile
  1423  00DA                     i1l1048:
  1424                           
  1425                           ;main.c: 74:             PORTD++;
  1426  00DA  3001               	movlw	1
  1427  00DB  02B0               	subwf	_var1,f
  1428  00DC                     i1l1050:
  1429                           
  1430                           ;main.c: 78: 
  1431  00DC  1C06               	btfss	6,0	;volatile
  1432  00DD  28DF               	goto	u45_21
  1433  00DE  28E0               	goto	u45_20
  1434  00DF                     u45_21:
  1435  00DF  28F3               	goto	i1l1062
  1436  00E0                     u45_20:
  1437  00E0                     i1l1052:
  1438                           
  1439                           ;main.c: 79:         } else {
  1440  00E0  3001               	movlw	1
  1441  00E1  00F5               	movwf	??_ISR
  1442  00E2  0875               	movf	??_ISR,w
  1443  00E3  07FC               	addwf	_debounce1,f
  1444  00E4                     i1l1054:
  1445                           
  1446                           ;main.c: 80:             PORTD = (PORTD << 1);
  1447  00E4  3002               	movlw	2
  1448  00E5  027C               	subwf	_debounce1,w
  1449  00E6  1C03               	skipc
  1450  00E7  28E9               	goto	u46_21
  1451  00E8  28EA               	goto	u46_20
  1452  00E9                     u46_21:
  1453  00E9  28F3               	goto	i1l1062
  1454  00EA                     u46_20:
  1455  00EA                     i1l1056:
  1456                           
  1457                           ;main.c: 81: 
  1458  00EA  01FC               	clrf	_debounce1
  1459  00EB                     i1l1058:
  1460                           
  1461                           ;main.c: 82:             PORTC = tabla7(Nibble1);
  1462  00EB  3001               	movlw	1
  1463  00EC  00F5               	movwf	??_ISR
  1464  00ED  0875               	movf	??_ISR,w
  1465  00EE  0785               	addwf	5,f	;volatile
  1466  00EF                     i1l1060:
  1467                           
  1468                           ;main.c: 83: 
  1469  00EF  3001               	movlw	1
  1470  00F0  00F5               	movwf	??_ISR
  1471  00F1  0875               	movf	??_ISR,w
  1472  00F2  07B0               	addwf	_var1,f
  1473  00F3                     i1l1062:
  1474                           
  1475                           ;main.c: 91: }
  1476  00F3  1D0B               	btfss	11,2	;volatile
  1477  00F4  28F6               	goto	u47_21
  1478  00F5  28F7               	goto	u47_20
  1479  00F6                     u47_21:
  1480  00F6  2936               	goto	i1l81
  1481  00F7                     u47_20:
  1482  00F7                     i1l1064:
  1483                           
  1484                           ;main.c: 92: 
  1485  00F7  110B               	bcf	11,2	;volatile
  1486  00F8                     i1l1066:
  1487                           
  1488                           ;main.c: 93: void main(void) {
  1489  00F8  303D               	movlw	61
  1490  00F9  0081               	movwf	1	;volatile
  1491  00FA                     i1l1068:
  1492                           
  1493                           ;main.c: 94: 
  1494  00FA  0187               	clrf	7	;volatile
  1495  00FB                     i1l1070:
  1496                           
  1497                           ;main.c: 95:     Setup();
  1498  00FB  087D               	movf	_varADC,w	;volatile
  1499  00FC  120A  118A  21D8  120A  118A  	fcall	_NibbleH
  1500  0101  00F5               	movwf	??_ISR
  1501  0102  0875               	movf	??_ISR,w
  1502  0103  00FA               	movwf	_Nibble1
  1503  0104                     i1l1072:
  1504                           
  1505                           ;main.c: 96:     multiplexor();
  1506  0104  087D               	movf	_varADC,w	;volatile
  1507  0105  120A  118A  217D  120A  118A  	fcall	_NibbleL
  1508  010A  00F5               	movwf	??_ISR
  1509  010B  0875               	movf	??_ISR,w
  1510  010C  00F9               	movwf	_Nibble2
  1511                           
  1512                           ;main.c: 98:     canalADC(5);
  1513  010D  3002               	movlw	2
  1514  010E  1283               	bcf	3,5	;RP0=0, select bank0
  1515  010F  1303               	bcf	3,6	;RP1=0, select bank0
  1516  0110  0608               	xorwf	8,w	;volatile
  1517  0111  1D03               	btfss	3,2
  1518  0112  2914               	goto	u48_21
  1519  0113  2915               	goto	u48_20
  1520  0114                     u48_21:
  1521  0114  2916               	goto	i1l1076
  1522  0115                     u48_20:
  1523  0115                     i1l1074:
  1524  0115  0188               	clrf	8	;volatile
  1525  0116                     i1l1076:
  1526  0116  0808               	movf	8,w	;volatile
  1527  0117  1D03               	btfss	3,2
  1528  0118  291A               	goto	u49_21
  1529  0119  291B               	goto	u49_20
  1530  011A                     u49_21:
  1531  011A  2929               	goto	i1l1082
  1532  011B                     u49_20:
  1533  011B                     i1l1078:
  1534  011B  3001               	movlw	1
  1535  011C  00F5               	movwf	??_ISR
  1536  011D  0875               	movf	??_ISR,w
  1537  011E  0788               	addwf	8,f	;volatile
  1538  011F                     i1l1080:
  1539  011F  0879               	movf	_Nibble2,w
  1540  0120  120A  118A  21E0  120A  118A  	fcall	_tabla7
  1541  0125  1283               	bcf	3,5	;RP0=0, select bank0
  1542  0126  1303               	bcf	3,6	;RP1=0, select bank0
  1543  0127  0087               	movwf	7	;volatile
  1544  0128  2936               	goto	i1l81
  1545  0129                     i1l1082:
  1546  0129  0808               	movf	8,w	;volatile
  1547  012A  00F5               	movwf	??_ISR
  1548  012B  0775               	addwf	??_ISR,w
  1549  012C  0088               	movwf	8	;volatile
  1550  012D                     i1l1084:
  1551  012D  087A               	movf	_Nibble1,w
  1552  012E  120A  118A  21E0  120A  118A  	fcall	_tabla7
  1553  0133  1283               	bcf	3,5	;RP0=0, select bank0
  1554  0134  1303               	bcf	3,6	;RP1=0, select bank0
  1555  0135  0087               	movwf	7	;volatile
  1556  0136                     i1l81:
  1557  0136  0878               	movf	??_ISR+3,w
  1558  0137  008A               	movwf	10
  1559  0138  0877               	movf	??_ISR+2,w
  1560  0139  0084               	movwf	4
  1561  013A  0E76               	swapf	??_ISR+1,w
  1562  013B  0083               	movwf	3
  1563  013C  0EFE               	swapf	btemp,f
  1564  013D  0E7E               	swapf	btemp,w
  1565  013E  0009               	retfie
  1566  013F                     __end_of_ISR:
  1567                           
  1568                           	psect	intentry
  1569  0004                     __pintentry:	
  1570                           ;incstack = 0
  1571                           ; Regs used in _ISR: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1572                           
  1573  0004                     interrupt_function:
  1574  007E                     saved_w	set	btemp
  1575  0004  00FE               	movwf	btemp
  1576  0005  0E03               	swapf	3,w
  1577  0006  00F6               	movwf	??_ISR+1
  1578  0007  0804               	movf	4,w
  1579  0008  00F7               	movwf	??_ISR+2
  1580  0009  080A               	movf	10,w
  1581  000A  00F8               	movwf	??_ISR+3
  1582  000B  120A  118A  28B8   	ljmp	_ISR
  1583                           
  1584                           	psect	text6
  1585  01E0                     __ptext6:	
  1586 ;; *************** function _tabla7 *****************
  1587 ;; Defined at:
  1588 ;;		line 13 in file "display7.c"
  1589 ;; Parameters:    Size  Location     Type
  1590 ;;  entrada         1    wreg     unsigned char 
  1591 ;; Auto vars:     Size  Location     Type
  1592 ;;  entrada         1    0[COMMON] unsigned char 
  1593 ;; Return value:  Size  Location     Type
  1594 ;;                  1    wreg      unsigned char 
  1595 ;; Registers used:
  1596 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  1597 ;; Tracked objects:
  1598 ;;		On entry : 0/0
  1599 ;;		On exit  : 0/0
  1600 ;;		Unchanged: 0/0
  1601 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1602 ;;      Params:         0       0       0       0       0
  1603 ;;      Locals:         1       0       0       0       0
  1604 ;;      Temps:          0       0       0       0       0
  1605 ;;      Totals:         1       0       0       0       0
  1606 ;;Total ram usage:        1 bytes
  1607 ;; Hardware stack levels used:    1
  1608 ;; This function calls:
  1609 ;;		Nothing
  1610 ;; This function is called by:
  1611 ;;		_ISR
  1612 ;; This function uses a non-reentrant model
  1613 ;;
  1614                           
  1615                           
  1616                           ;psect for function _tabla7
  1617  01E0                     _tabla7:
  1618                           
  1619                           ;incstack = 0
  1620                           ; Regs used in _tabla7: [wreg-fsr0h+status,2+status,0]
  1621                           ;tabla7@entrada stored from wreg
  1622  01E0  00F0               	movwf	tabla7@entrada
  1623  01E1                     i1l932:
  1624                           
  1625                           ;display7.c: 15:     static uint8_t tabla[] = {0b01110111,;display7.c: 34:     return ta
      +                          bla[entrada];
  1626  01E1  0870               	movf	tabla7@entrada,w
  1627  01E2  3E20               	addlw	(low (tabla7@tabla| 0))& (0+255)
  1628  01E3  0084               	movwf	4
  1629  01E4  1383               	bcf	3,7	;select IRP bank0
  1630  01E5  0800               	movf	0,w
  1631  01E6                     i1l135:
  1632  01E6  0008               	return
  1633  01E7                     __end_of_tabla7:
  1634                           
  1635                           	psect	text7
  1636  017D                     __ptext7:	
  1637 ;; *************** function _NibbleL *****************
  1638 ;; Defined at:
  1639 ;;		line 52 in file "display7.c"
  1640 ;; Parameters:    Size  Location     Type
  1641 ;;  ValorADC        1    wreg     unsigned char 
  1642 ;; Auto vars:     Size  Location     Type
  1643 ;;  ValorADC        1    2[COMMON] unsigned char 
  1644 ;;  aux             1    4[COMMON] unsigned char 
  1645 ;;  NibbleL         1    3[COMMON] unsigned char 
  1646 ;; Return value:  Size  Location     Type
  1647 ;;                  1    wreg      unsigned char 
  1648 ;; Registers used:
  1649 ;;		wreg, status,2, status,0
  1650 ;; Tracked objects:
  1651 ;;		On entry : 0/0
  1652 ;;		On exit  : 0/0
  1653 ;;		Unchanged: 0/0
  1654 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1655 ;;      Params:         0       0       0       0       0
  1656 ;;      Locals:         3       0       0       0       0
  1657 ;;      Temps:          2       0       0       0       0
  1658 ;;      Totals:         5       0       0       0       0
  1659 ;;Total ram usage:        5 bytes
  1660 ;; Hardware stack levels used:    1
  1661 ;; This function calls:
  1662 ;;		Nothing
  1663 ;; This function is called by:
  1664 ;;		_ISR
  1665 ;; This function uses a non-reentrant model
  1666 ;;
  1667                           
  1668                           
  1669                           ;psect for function _NibbleL
  1670  017D                     _NibbleL:
  1671                           
  1672                           ;incstack = 0
  1673                           ; Regs used in _NibbleL: [wreg+status,2+status,0]
  1674                           ;NibbleL@ValorADC stored from wreg
  1675  017D  00F2               	movwf	NibbleL@ValorADC
  1676  017E                     i1l922:
  1677                           
  1678                           ;display7.c: 54:     uint8_t aux = ValorADC ;
  1679  017E  0872               	movf	NibbleL@ValorADC,w
  1680  017F  00F0               	movwf	??_NibbleL
  1681  0180  0870               	movf	??_NibbleL,w
  1682  0181  00F4               	movwf	NibbleL@aux
  1683  0182                     i1l924:
  1684                           
  1685                           ;display7.c: 55:     aux = (aux >> 4);
  1686  0182  0874               	movf	NibbleL@aux,w
  1687  0183  00F0               	movwf	??_NibbleL
  1688  0184  3004               	movlw	4
  1689  0185                     u26_25:
  1690  0185  1003               	clrc
  1691  0186  0CF0               	rrf	??_NibbleL,f
  1692  0187  3EFF               	addlw	-1
  1693  0188  1D03               	skipz
  1694  0189  2985               	goto	u26_25
  1695  018A  0870               	movf	??_NibbleL,w
  1696  018B  00F1               	movwf	??_NibbleL+1
  1697  018C  0871               	movf	??_NibbleL+1,w
  1698  018D  00F4               	movwf	NibbleL@aux
  1699  018E                     i1l926:
  1700                           
  1701                           ;display7.c: 56:     uint8_t NibbleL = (aux & 0b00001111);
  1702  018E  0874               	movf	NibbleL@aux,w
  1703  018F  390F               	andlw	15
  1704  0190  00F0               	movwf	??_NibbleL
  1705  0191  0870               	movf	??_NibbleL,w
  1706  0192  00F3               	movwf	NibbleL@NibbleL
  1707  0193                     i1l928:
  1708                           
  1709                           ;display7.c: 60:     return NibbleL;
  1710  0193  0873               	movf	NibbleL@NibbleL,w
  1711  0194                     i1l144:
  1712  0194  0008               	return
  1713  0195                     __end_of_NibbleL:
  1714                           
  1715                           	psect	text8
  1716  01D8                     __ptext8:	
  1717 ;; *************** function _NibbleH *****************
  1718 ;; Defined at:
  1719 ;;		line 43 in file "display7.c"
  1720 ;; Parameters:    Size  Location     Type
  1721 ;;  ValorADC        1    wreg     unsigned char 
  1722 ;; Auto vars:     Size  Location     Type
  1723 ;;  ValorADC        1    1[COMMON] unsigned char 
  1724 ;;  NibbleH         1    2[COMMON] unsigned char 
  1725 ;; Return value:  Size  Location     Type
  1726 ;;                  1    wreg      unsigned char 
  1727 ;; Registers used:
  1728 ;;		wreg, status,2
  1729 ;; Tracked objects:
  1730 ;;		On entry : 0/0
  1731 ;;		On exit  : 0/0
  1732 ;;		Unchanged: 0/0
  1733 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1734 ;;      Params:         0       0       0       0       0
  1735 ;;      Locals:         2       0       0       0       0
  1736 ;;      Temps:          1       0       0       0       0
  1737 ;;      Totals:         3       0       0       0       0
  1738 ;;Total ram usage:        3 bytes
  1739 ;; Hardware stack levels used:    1
  1740 ;; This function calls:
  1741 ;;		Nothing
  1742 ;; This function is called by:
  1743 ;;		_ISR
  1744 ;; This function uses a non-reentrant model
  1745 ;;
  1746                           
  1747                           
  1748                           ;psect for function _NibbleH
  1749  01D8                     _NibbleH:
  1750                           
  1751                           ;incstack = 0
  1752                           ; Regs used in _NibbleH: [wreg+status,2]
  1753                           ;NibbleH@ValorADC stored from wreg
  1754  01D8  00F1               	movwf	NibbleH@ValorADC
  1755  01D9                     i1l916:
  1756                           
  1757                           ;display7.c: 45:     uint8_t NibbleH = (ValorADC & 0b00001111);
  1758  01D9  0871               	movf	NibbleH@ValorADC,w
  1759  01DA  390F               	andlw	15
  1760  01DB  00F0               	movwf	??_NibbleH
  1761  01DC  0870               	movf	??_NibbleH,w
  1762  01DD  00F2               	movwf	NibbleH@NibbleH
  1763  01DE                     i1l918:
  1764                           
  1765                           ;display7.c: 48:     return NibbleH;
  1766  01DE  0872               	movf	NibbleH@NibbleH,w
  1767  01DF                     i1l141:
  1768  01DF  0008               	return
  1769  01E0                     __end_of_NibbleH:
  1770  007E                     btemp	set	126	;btemp
  1771  007E                     wtemp0	set	126
  1772                           
  1773                           	psect	config
  1774                           
  1775                           ;Config register CONFIG1 @ 0x2007
  1776                           ;	Oscillator Selection bits
  1777                           ;	FOSC = INTRC_NOCLKOUT, INTOSCIO oscillator: I/O function on RA6/OSC2/CLKOUT pin, I/O f
      +                          unction on RA7/OSC1/CLKIN
  1778                           ;	Watchdog Timer Enable bit
  1779                           ;	WDTE = OFF, WDT disabled and can be enabled by SWDTEN bit of the WDTCON register
  1780                           ;	Power-up Timer Enable bit
  1781                           ;	PWRTE = OFF, PWRT disabled
  1782                           ;	RE3/MCLR pin function select bit
  1783                           ;	MCLRE = OFF, RE3/MCLR pin function is digital input, MCLR internally tied to VDD
  1784                           ;	Code Protection bit
  1785                           ;	CP = OFF, Program memory code protection is disabled
  1786                           ;	Data Code Protection bit
  1787                           ;	CPD = OFF, Data memory code protection is disabled
  1788                           ;	Brown Out Reset Selection bits
  1789                           ;	BOREN = OFF, BOR disabled
  1790                           ;	Internal External Switchover bit
  1791                           ;	IESO = OFF, Internal/External Switchover mode is disabled
  1792                           ;	Fail-Safe Clock Monitor Enabled bit
  1793                           ;	FCMEN = OFF, Fail-Safe Clock Monitor is disabled
  1794                           ;	Low Voltage Programming Enable bit
  1795                           ;	LVP = OFF, RB3 pin has digital I/O, HV on MCLR must be used for programming
  1796                           ;	In-Circuit Debugger Mode bit
  1797                           ;	DEBUG = 0x1, unprogrammed default
  1798  2007                     	org	8199
  1799  2007  20D4               	dw	8404
  1800                           
  1801                           ;Config register CONFIG2 @ 0x2008
  1802                           ;	Brown-out Reset Selection bit
  1803                           ;	BOR4V = BOR40V, Brown-out Reset set to 4.0V
  1804                           ;	Flash Program Memory Self Write Enable bits
  1805                           ;	WRT = OFF, Write protection off
  1806  2008                     	org	8200
  1807  2008  3FFF               	dw	16383

Data Sizes:
    Strings     0
    Constant    0
    Data        16
    BSS         6
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      9      14
    BANK0            80      1      18
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    None.

Critical Paths under _ISR in COMMON

    _ISR->_NibbleL

Critical Paths under _main in BANK0

    _main->_canalADC

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0     308
                              _Setup
                           _canalADC
                          _configADC
                        _multiplexor
 ---------------------------------------------------------------------------------
 (1) _multiplexor                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _configADC                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _canalADC                                             1     1      0     308
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _Setup                                                0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 1
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (2) _ISR                                                  4     4      0     158
                                              5 COMMON     4     4      0
                            _NibbleH
                            _NibbleL
                             _tabla7
 ---------------------------------------------------------------------------------
 (3) _tabla7                                               1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (3) _NibbleL                                              5     5      0      91
                                              0 COMMON     5     5      0
 ---------------------------------------------------------------------------------
 (3) _NibbleH                                              3     3      0      45
                                              0 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Setup
   _canalADC
   _configADC
   _multiplexor

 _ISR (ROOT)
   _NibbleH
   _NibbleL
   _tabla7

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK3               60      0       0       9        0.0%
BITBANK3            60      0       0       8        0.0%
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               60      0       0      11        0.0%
BITBANK2            60      0       0      10        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50      0       0       7        0.0%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50      1      12       5       22.5%
BITBANK0            50      0       0       4        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      9       E       1      100.0%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0      20      12        0.0%
ABS                  0      0      20       3        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V2.31 build 20201012212115 
Symbol Table                                                                                   Mon Feb 01 12:26:10 2021

                      pc 0002                       l94 017C                       fsr 0004  
                    l120 00B6                      l121 00B7                      l124 01A9  
                    l138 01D7                      l940 0169                      l950 0171  
                    l942 016B                      l960 0178                      l952 0172  
                    l944 016C                      l936 0161                      l962 0179  
                    l954 0173                      l946 016D                      l938 0165  
                    l970 0195                      l964 017A                      l956 0174  
                    l948 016E                      l980 003E                      l972 002C  
                    l966 017B                      l958 0177                      l990 0058  
                    l982 0044                      l974 0031                      l992 005C  
                    l984 0048                      l976 0035                      l968 01CD  
                    l994 0062                      l986 004E                      l978 003A  
                    l996 0066                      l988 0052                      l998 006C  
                    u300 004E                      u301 004D                      u310 0058  
                    u311 0057                      u400 00B2                      u320 0062  
                    u401 00B1                      u321 0061                      u330 006C  
                    u331 006B                      u340 0076                      u500 015C  
                    u341 0075                      u501 015B                      u350 0080  
                    u270 0031                      u351 007F                      u271 0030  
                    u360 008A                      u280 003A                      u361 0089  
                    u281 0039                      u370 0094                      u290 0044  
                    u371 0093                      u291 0043                      u380 009E  
                    _ISR 00B8                      u381 009D                      u390 00A8  
                    u391 00A7                      fsr0 0004                      indf 0000  
                   ?_ISR 0070               NibbleL@aux 0074                     l1000 0070  
                   l1010 008A                     l1002 0076                     l1020 00A2  
                   l1012 008E                     l1004 007A                     l1022 00A8  
                   l1014 0094                     l1006 0080                     l1024 00AC  
                   l1016 0098                     l1008 0084                     l1026 00B2  
                   l1018 009E                     l1090 014E                     l1092 0154  
                   l1094 015C                     l1086 013F                     l1088 0149  
                   _ADIF 0066                     i1l81 0136                     _TMR0 0001  
                   _main 013F                     _var1 0030                     btemp 007E  
                   start 000E          __end_of_NibbleH 01E0          __end_of_NibbleL 0195  
                  ??_ISR 0075                    ?_main 0070                    _ANSEL 0188  
                  i1l141 01DF                    i1l135 01E6                    i1l144 0194  
                  i1l922 017E                    i1l916 01D9                    i1l924 0182  
                  i1l932 01E1                    i1l918 01DE                    i1l926 018E  
                  i1l928 0193                    u41_20 00BE                    u41_21 00BD  
                  u42_20 00C8                    u42_21 00C7                    u26_25 0185  
                  u43_20 00CD                    u43_21 00CC                    _PORTA 0005  
                  _PORTB 0006                    _PORTC 0007                    _PORTD 0008  
                  u44_20 00D7                    u44_21 00D6                    u45_20 00E0  
                  u45_21 00DF                    u46_20 00EA                    u46_21 00E9  
                  u47_20 00F7                    u47_21 00F6                    u48_20 0115  
                  u48_21 0114                    u49_20 011B                    u49_21 011A  
                  _TRISA 0085                    _TRISB 0086                    _TRISC 0087  
                  _TRISD 0088                    _Setup 0161                    pclath 000A  
                  status 0003                    wtemp0 007E          __initialization 0011  
           __end_of_main 0161                   ??_main 0032                   ?_Setup 0070  
                 _ADRESH 001E                   _ANSELH 0189                   i1l1030 00BE  
                 i1l1040 00CD                   i1l1032 00C2                   i1l1042 00D1  
                 i1l1050 00DC                   i1l1034 00C3                   i1l1060 00EF  
                 i1l1052 00E0                   i1l1044 00D7                   i1l1036 00C4  
                 i1l1028 00B8                   i1l1070 00FB                   i1l1054 00E4  
                 i1l1046 00D8                   i1l1038 00C8                   i1l1062 00F3  
                 i1l1080 011F                   i1l1072 0104                   i1l1064 00F7  
                 i1l1056 00EA                   i1l1048 00DA                   i1l1082 0129  
                 i1l1074 0115                   i1l1066 00F8                   i1l1058 00EB  
                 i1l1084 012D                   i1l1076 0116                   i1l1068 00FA  
                 i1l1078 011B                   _INTCON 000B         __end_of_canalADC 00B8  
              ??_NibbleH 0070                ??_NibbleL 0070              tabla7@tabla 0020  
                 _varADC 007D                   _tabla7 01E0                   saved_w 007E  
        NibbleH@ValorADC 0071             ?_multiplexor 0070  __end_of__initialization 0025  
         __pcstackCOMMON 0070            __end_of_Setup 017D             __pidataBANK0 01BD  
        NibbleL@ValorADC 0072       __size_of_configADC 0015                  ??_Setup 0031  
             __pbssBANK0 0030               __pmaintext 013F               __pintentry 0004  
                ?_tabla7 0070                ?_canalADC 0070                  _Nibble1 007A  
                _Nibble2 0079                  _NibbleH 01D8                  _NibbleL 017D  
      __end_of_configADC 01AA          __size_of_tabla7 0007                _ANSELbits 0188  
                __ptext1 01CD                  __ptext2 0195                  __ptext3 0029  
                __ptext4 0161                  __ptext5 00B8                  __ptext6 01E0  
                __ptext7 017D                  __ptext8 01D8               ??_canalADC 0031  
           __size_of_ISR 0087     end_of_initialization 0025     __size_of_multiplexor 000B  
              _PORTBbits 0006                _PORTDbits 0008                _TRISEbits 0089  
         __end_of_tabla7 01E7      start_initialization 0011              __end_of_ISR 013F  
             init_fetch0 01AA              __pdataBANK0 0020           NibbleH@NibbleH 0072  
               ??_tabla7 0070           NibbleL@NibbleL 0073              __pbssCOMMON 0079  
              ___latbits 0002        __size_of_canalADC 008F            __pcstackBANK0 0031  
               ?_NibbleH 0070                 ?_NibbleL 0070                _debounce1 007C  
              _debounce2 007B                _configADC 0195           __size_of_Setup 001C  
      interrupt_function 0004                 _IOCBbits 0096                 _PIE1bits 008C  
               _PIR1bits 000C               ?_configADC 0070               _ADCON0bits 001F  
             _ADCON1bits 009F            ??_multiplexor 0031         __size_of_NibbleH 0008  
       __size_of_NibbleL 0018                 _canalADC 0029            canalADC@canal 0031  
          tabla7@entrada 0070            __size_of_main 0022      __end_of_multiplexor 01D8  
            ??_configADC 0031               _INTCONbits 000B                 init_ram0 01AE  
               intlevel1 0000               _OPTION_REG 0081              _multiplexor 01CD  
